{"version":3,"sources":["components/TodoList/todoReducerSlice.js","components/Todo/index.js","redux/selectors.js","components/TodoList/index.js","components/Filters/filterReducerSlice.js","components/Filters/index.js","App.js","redux/store.js","index.js"],"names":["createSlice","name","initialState","id","completed","prioriry","reducers","addTodo","state","action","push","payload","toggleTodoStatus","currentTodo","find","todo","priorityColorMapping","High","Medium","Low","Todo","useState","checked","setChecked","dispatch","useDispatch","justify","style","marginBottom","opacity","textDecoration","onChange","TodoListSlice","actions","color","margin","todoRemainingSelector","createSelector","todoList","filters","search","status","priorities","searchText","filter","length","includes","TodoList","todoName","setTodoName","setPrioriry","useSelector","inputRef","useRef","height","span","overflowY","map","Group","display","compact","e","target","value","ref","defaultValue","Option","label","type","onClick","todoListReducerSlice","uuidv4","current","focus","searchFilterChanges","statusFilterChanges","prioritiesFilterChanges","Search","Input","Filters","setSearchText","filterStatus","setFilterStatus","filterPriorities","setFilterPriorities","Paragraph","fontWeight","marginTop","placeholder","filtersSlice","sm","mode","allowClear","width","Title","Typography","App","flexDirection","backgroundColor","padding","boxShadow","borderRadius","textAlign","store","configureStore","reducer","todoListSlice","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.666f035b.chunk.js","sourcesContent":["// const initialState = [\r\n//   { id: 1, name: \"Học reactjs\", completed: false, prioriry: \"Medium\" },\r\n//   { id: 2, name: \"Học Võ\", completed: true, prioriry: \"High\" },\r\n//   { id: 3, name: \"Học Redux toolkit\", completed: false, prioriry: \"Low\" },\r\n// ];\r\n\r\n// const todoListReducer = (state = initialState, action) => {\r\n//   // console.log(state, action);\r\n//   switch (action.type) {\r\n//     case \"todoList/addTodo\":\r\n//       return [...state, action.payload];\r\n\r\n//     case \"todoList/toggleTodoStatus\":\r\n//       return state.map((todo) =>\r\n//         todo.id === action.payload\r\n//           ? { ...todo, completed: !todo.completed }\r\n//           : todo\r\n//       );//nếu id=payload thì completed = !completed : todo\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// export default todoListReducer;\r\n\r\nimport { createSlice } from \"@reduxjs/toolkit\";\r\nexport default createSlice({\r\n  name: \"todoList\",\r\n  initialState: [\r\n    { id: 1, name: \"Học reactjs\", completed: false, prioriry: \"Medium\" },\r\n    { id: 2, name: \"Học Võ\", completed: true, prioriry: \"High\" },\r\n    { id: 3, name: \"Học Redux toolkit\", completed: false, prioriry: \"Low\" },\r\n  ],\r\n  reducers: {\r\n    addTodo: (state, action) => {\r\n      state.push(action.payload); //rất hay\r\n    }, //action creators\r\n    toggleTodoStatus: (state, action) => {\r\n      const currentTodo = state.find((todo) => todo.id === action.payload);\r\n      currentTodo.completed = !currentTodo.completed;\r\n    },\r\n  },\r\n});\r\n\r\n","import { Row, Tag, Checkbox } from \"antd\";\r\nimport { useState } from \"react\";\r\n\r\n// dispatch: gửi đi cập nhât lại\r\nimport { useDispatch } from \"react-redux\";\r\n// import { toggleTodoStatus } from \"../../redux/actions\";\r\nimport TodoListSlice from \"../TodoList/todoReducerSlice\";\r\n\r\nconst priorityColorMapping = {\r\n  High: \"red\",\r\n  Medium: \"blue\",\r\n  Low: \"gray\",\r\n};\r\n\r\nexport default function Todo({ id, name, prioriry, completed }) {\r\n  const [checked, setChecked] = useState(completed);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const toggleCheckbox = () => {\r\n    setChecked(!checked);\r\n    //dispatch(toggleTodoStatus(id))// cài đặt lại toggle cho todo có id = ...\r\n    dispatch(TodoListSlice.actions.toggleTodoStatus(id));\r\n  };\r\n\r\n  return (\r\n    <Row\r\n      justify=\"space-between\"\r\n      style={{\r\n        marginBottom: 3,\r\n        ...(checked ? { opacity: 0.5, textDecoration: \"line-through\" } : {}),\r\n      }}\r\n    >\r\n      <Checkbox checked={checked} onChange={toggleCheckbox}>\r\n        {name}\r\n      </Checkbox>\r\n      <Tag color={priorityColorMapping[prioriry]} style={{ margin: 0 }}>\r\n        {prioriry}\r\n      </Tag>\r\n    </Row>\r\n  );\r\n}\r\n","// export const todoListSelector = (state) => {\r\n//   const searchText = searchTextSelector(state);\r\n\r\n//   const todoRemaining = state.todoList.filter((todo) =>\r\n//     todo.name.includes(searchText)\r\n//   );\r\n//   return todoRemaining;\r\n// }; // xuất ra kết hợp với search\r\n\r\n// export const searchTextSelector = (state) => {\r\n//   return state.filters.search;\r\n// };\r\n\r\n// dùng reselect sẽ gộp lại selector rất là tiện\r\n// import { createSelector } from \"reselect\";\r\nimport { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nexport const todoListSelector = (state) => state.todoList;\r\nexport const searchTextSelector = (state) => state.filters.search;\r\nexport const filterStatusSelector = (state) => state.filters.status;\r\nexport const filterPrioritiesSelector = (state) => state.filters.priorities;\r\n\r\nexport const todoRemainingSelector = createSelector(\r\n  todoListSelector,\r\n  searchTextSelector,\r\n  filterStatusSelector,\r\n  filterPrioritiesSelector,\r\n  (todoList, searchText, status, priorities) => {\r\n    // status: 'all', 'completed', 'todo'\r\n    return todoList.filter((todo) => {\r\n      if (status === \"All\") {\r\n        return priorities.length\r\n          ? todo.name.includes(searchText) && priorities.includes(todo.prioriry) //text,...-All-Medium,...\r\n          : todo.name.includes(searchText);\r\n      }\r\n      return (\r\n        todo.name.includes(searchText) &&\r\n        (status === \"Completed\" ? todo.completed : !todo.completed) &&\r\n        (priorities.length ? priorities.includes(todo.prioriry) : true) //text=...,-Completed,todo-...\r\n      );\r\n    });\r\n  }\r\n);\r\n","import { Col, Row, Input, Button, Select, Tag } from \"antd\";\r\nimport { useState, useRef } from \"react\";\r\nimport Todo from \"../Todo\";\r\n\r\n// sử dụng dispatch gửi đi\r\nimport { useDispatch, useSelector } from \"react-redux/es/exports\";\r\n\r\n// action\r\n// import { addTodo } from \"../../redux/actions\";\r\n// import { todoListSelector } from \"../../redux/selectors\";// lấy selector\r\nimport { todoRemainingSelector } from \"../../redux/selectors\";\r\n\r\n// id ngẫu nhiên từ uuid\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\n// redux/toolkit\r\nimport todoListReducerSlice from \"./todoReducerSlice\";\r\n\r\nexport default function TodoList() {\r\n  const [todoName, setTodoName] = useState(\"\");\r\n  const [prioriry, setPrioriry] = useState(\"Medium\");\r\n\r\n  const dispatch = useDispatch();\r\n  // const todoList = useSelector(todoListSelector);// xuất giá trị\r\n  const todoList = useSelector(todoRemainingSelector); // xuất giá trị\r\n\r\n  const inputRef = useRef();\r\n\r\n  // console.log([uuidv4('hex')]);\r\n\r\n  const handleOnClickAddTodoList = () => {\r\n    dispatch(\r\n      todoListReducerSlice.actions.addTodo({\r\n        id: uuidv4(),\r\n        name: todoName,\r\n        prioriry: prioriry,\r\n        completed: false,\r\n      })\r\n    );\r\n\r\n    setTodoName(\"\");\r\n    setPrioriry(\"Medium\");\r\n    inputRef.current.focus();\r\n  };\r\n\r\n  return (\r\n    <Row style={{ height: \"calc(100% - 40px)\" }}>\r\n      <Col span={24} style={{ height: \"calc(100% - 40px)\", overflowY: \"auto\" }}>\r\n        {/* xuất ra todoList */}\r\n        {todoList.map((todo) => (\r\n          <Todo\r\n            key={todo.id}\r\n            id={todo.id}\r\n            name={todo.name}\r\n            prioriry={todo.prioriry}\r\n            completed={todo.completed}\r\n          />\r\n        ))}\r\n      </Col>\r\n      <Col span={24}>\r\n        <Input.Group style={{ display: \"flex\" }} compact>\r\n          <Input\r\n            onChange={(e) => setTodoName(e.target.value)}\r\n            value={todoName}\r\n            ref={inputRef}\r\n          />\r\n          {/* thay đổi input */}\r\n          <Select\r\n            defaultValue=\"Medium\"\r\n            value={prioriry}\r\n            onChange={(value) => setPrioriry(value)}\r\n          >\r\n            {/*thay đổi select */}\r\n            <Select.Option value=\"High\" label=\"High\">\r\n              <Tag color=\"red\">High</Tag>\r\n            </Select.Option>\r\n            <Select.Option value=\"Medium\" label=\"Medium\">\r\n              <Tag color=\"blue\">Medium</Tag>\r\n            </Select.Option>\r\n            <Select.Option value=\"Low\" label=\"Low\">\r\n              <Tag color=\"gray\">Low</Tag>\r\n            </Select.Option>\r\n          </Select>\r\n          <Button type=\"primary\" onClick={handleOnClickAddTodoList}>\r\n            {/* xử lý click add*/}\r\n            Add\r\n          </Button>\r\n        </Input.Group>\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n","// const initialState = {\r\n//   search: \"\",\r\n//   status: \"All\",\r\n//   priorities: [],\r\n// };\r\n// const filtersReducer = (state = initialState, action) => {\r\n//   // console.log(state, action);\r\n//   switch (action.type) {\r\n//     case \"filters/searchFilterChange\":\r\n//       return {\r\n//         ...state,\r\n//         search: action.payload,\r\n//       };\r\n//     case \"filters/statusFilterChanges\":\r\n//       return {\r\n//         ...state,\r\n//         status: action.payload,\r\n//       };\r\n//     case \"filters/priorityFilterChanges\":\r\n//       return {\r\n//         ...state,\r\n//         priorities: action.payload,\r\n//       };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// export default filtersReducer;\r\n\r\nimport { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport default createSlice({\r\n  name: \"filters\",\r\n  initialState: {\r\n    search: \"\",\r\n    status: \"All\",\r\n    priorities: [],\r\n  },\r\n  reducers: {\r\n    searchFilterChanges: (state, action) => {\r\n      // mutation: thao tác đc trực tiếp nên obj, array || IMMER\r\n      // return {\r\n      //   ...state,\r\n      //   search: action.payload,\r\n      // };\r\n      // mới\r\n      state.search = action.payload;\r\n    }, // => actions: {type:\"filters/searchFilterChanges\"} k cần tạo riêng action\r\n    statusFilterChanges: (state, action) => {\r\n      state.status = action.payload;\r\n    },\r\n    prioritiesFilterChanges: (state, action) => {\r\n      state.priorities = action.payload;\r\n    },\r\n  },\r\n});\r\n","import { Col, Row, Input, Typography, Radio, Select, Tag } from \"antd\";\r\nimport { useState } from \"react\";\r\n\r\n// gửi dispatch đi\r\nimport { useDispatch } from \"react-redux\";\r\n// import { searchFilterChanges, statusFilterChanges, prioritiesFilterChanges } from \"../../redux/actions\";\r\n\r\n// redux/toolkit lấy giá trị\r\nimport filtersSlice from \"./filterReducerSlice\";\r\n\r\nconst { Search } = Input;\r\n\r\nexport default function Filters() {\r\n  const [searchText, setSearchText] = useState(\"\");\r\n  const [filterStatus, setFilterStatus] = useState(\"All\");\r\n  const [filterPriorities, setFilterPriorities] = useState([]);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleSearchTextChange = (e) => {\r\n    setSearchText(e.target.value);\r\n    // dispatch(searchFilterChanges(e.target.value));\r\n    dispatch(filtersSlice.actions.searchFilterChanges(e.target.value));\r\n  };\r\n\r\n  const handleStatusChange = (e) => {\r\n    setFilterStatus(e.target.value);\r\n    // dispatch(statusFilterChanges(e.target.value));\r\n    dispatch(filtersSlice.actions.statusFilterChanges(e.target.value));\r\n  };\r\n\r\n  const handlePrioritiesChange = (value) => {\r\n    setFilterPriorities(value);\r\n    // dispatch(prioritiesFilterChanges(value));\r\n    dispatch(filtersSlice.actions.prioritiesFilterChanges(value));\r\n  };\r\n\r\n  return (\r\n    <Row justify=\"center\">\r\n      <Col span={24}>\r\n        <Typography.Paragraph\r\n          style={{ fontWeight: \"bold\", marginBottom: 3, marginTop: 10 }}\r\n        >\r\n          Search\r\n        </Typography.Paragraph>\r\n        <Search\r\n          placeholder=\"input search text\"\r\n          value={searchText}\r\n          onChange={handleSearchTextChange}\r\n        />\r\n        {/* tìm kiếm search */}\r\n      </Col>\r\n      <Col sm={24}>\r\n        <Typography.Paragraph\r\n          style={{ fontWeight: \"bold\", marginBottom: 3, marginTop: 10 }}\r\n        >\r\n          Filter By Status\r\n        </Typography.Paragraph>\r\n        <Radio.Group value={filterStatus} onChange={handleStatusChange}>\r\n          {/* chỉnh sửa radio button*/}\r\n          <Radio value=\"All\">All</Radio>\r\n          <Radio value=\"Completed\">Completed</Radio>\r\n          <Radio value=\"Todo\">To do</Radio>\r\n        </Radio.Group>\r\n      </Col>\r\n      <Col sm={24}>\r\n        <Typography.Paragraph\r\n          style={{ fontWeight: \"bold\", marginBottom: 3, marginTop: 10 }}\r\n        >\r\n          Filter By Priority\r\n        </Typography.Paragraph>\r\n        <Select\r\n          mode=\"multiple\"\r\n          allowClear\r\n          placeholder=\"Please select\"\r\n          style={{ width: \"100%\" }}\r\n          value={filterPriorities}\r\n          onChange={handlePrioritiesChange}\r\n        >\r\n          {/* thay đổi của priorities */}\r\n          <Select.Option value=\"High\" label=\"High\">\r\n            <Tag color=\"red\">High</Tag>\r\n          </Select.Option>\r\n          <Select.Option value=\"Medium\" label=\"Medium\">\r\n            <Tag color=\"blue\">Medium</Tag>\r\n          </Select.Option>\r\n          <Select.Option value=\"Low\" label=\"Low\">\r\n            <Tag color=\"gray\">Low</Tag>\r\n          </Select.Option>\r\n        </Select>\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n","import { Typography, Divider } from 'antd';\r\nimport './App.css';\r\nimport TodoList from './components/TodoList';\r\nimport Filters from './components/Filters';\r\n\r\nconst { Title } = Typography;\r\n\r\nfunction App() {\r\n  return (\r\n    <div\r\n      style={{\r\n        width: 500,\r\n        margin: '0 auto',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        backgroundColor: 'white',\r\n        padding: 20,\r\n        boxShadow: '0 0 10px 4px #bfbfbf',\r\n        borderRadius: 5,\r\n        height: '90vh',\r\n      }}\r\n    >\r\n      <Title style={{ textAlign: 'center' }}>TODO APP with REDUX TOOLKIT</Title>\r\n      <Filters />\r\n      <Divider />\r\n      <TodoList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// import { createStore } from \"redux\";\r\n// import rootReducer from \"./reducers\";\r\n\r\n// import { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\n// const composeEnhancers = composeWithDevTools(); // khi dùng redux toolkit sẽ được tích hợp vào\r\n// const store = createStore(rootReducer, composeEnhancers); // 3 tham số 1 reducer, 2 giá trị value, 3 các thư viện\r\n\r\n// export default store;\r\n\r\n// redux/toolkit\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\nimport filtersSlice from \"../components/Filters/filterReducerSlice\";\r\nimport todoListSlice from \"../components/TodoList/todoReducerSlice\";\r\n\r\n// reducer store\r\nconst store = configureStore({\r\n  reducer: {\r\n    filters: filtersSlice.reducer,\r\n    todoList: todoListSlice.reducer,\r\n  },\r\n});\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\n// thêm store vào\r\nimport store from \"./redux/store\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}